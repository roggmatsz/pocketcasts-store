name: Create Semver Version Tag

env:
    MAJOR_VERSION: 0
    MINOR_VERSION: 0
    REVISION: 1
    NEW_TAG: v0.0.1

on: 
  pull_request_target:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  create-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
        
      - name: Get major version from setup.py
        id: get-major
        run: |
          if [ ! -f setup.py ]; then
            echo "Error: setup.py not found"
            exit 1
          fi
          
          major_version=$(grep -oP "version='\K\d+" setup.py || echo "")
          
          if [ -z "$major_version" ]; then
            echo "Error: Could not find valid major version in setup.py"
            echo "Current directory: $(pwd)"
            echo "Files in directory: $(ls -la)"
            exit 1
          fi
          
          echo "Found major version: $major_version"
          echo "MAJOR_VERSION=$major_version" >> $GITHUB_ENV
        
      - name: Count merged PRs
        id: count-prs
        run: |
          # Use GitHub API to get merged PRs
          pr_count=$(gh api graphql -f query='
            query($owner:String!, $repo:String!) {
              repository(owner:$owner, name:$repo) {
                pullRequests(states:MERGED, baseRefName:"main") {
                  totalCount
                }
              }
            }' -f owner="${{ github.repository_owner }}" -f repo="${{ github.event.repository.name }}" | jq '.data.repository.pullRequests.totalCount')
          
          echo "Total merged PRs to main: $pr_count"
          echo "MINOR_VERSION=$pr_count" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Count commits in PR branch
        id: count-commits
        run: |
          base_commit=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          commit_count=$(git rev-list --count $base_commit..${{ github.event.pull_request.head.sha }})
          
          if [ -z "$commit_count" ] || [ "$commit_count" -eq "0" ]; then
            commit_count="1"
          fi
          
          echo "Revision count calculated as: $commit_count"
          echo "REVISION=$commit_count" >> $GITHUB_ENV
      
      - name: Generate new tag
        id: generate-tag
        run: |
          major="${{ env.MAJOR_VERSION }}"
          minor="${{ env.MINOR_VERSION }}"
          revision="${{ env.REVISION }}"
          
          [[ -z "$major" ]] && major="0"
          [[ -z "$minor" ]] && minor="0"
          [[ -z "$revision" ]] && revision="1"
          
          new_tag="v${major}.${minor}.${revision}"
          echo "Generated tag: $new_tag"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
      
      - name: Create and push tag
        run: |
          if [[ ! "${{ env.NEW_TAG }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid tag format: ${{ env.NEW_TAG }}"
            exit 1
          fi
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}
          
          Major: Controlled via setup.py
          Minor: PR #${{ env.MINOR_VERSION }} since last major version
          Revision: ${{ env.REVISION }} commits in this PR"
          
          git push origin ${{ env.NEW_TAG }}